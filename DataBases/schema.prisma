generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  LEARNER
  INSTRUCTOR
  TA
  ADMIN
}

enum AssignmentType {
  FILE_UPLOAD
  URL
  CODE
  NOTEBOOK
  QUIZ
}

enum Visibility {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProgrammingLanguage {
  PYTHON
  JAVASCRIPT
  TYPESCRIPT
  C
  CPP
  JAVA
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments Enrollment[]
  submissions Submission[]
  feedback    Feedback[]   @relation("FeedbackAuthor")
  grades      Grade[]

  isAdmin Boolean @default(false)

  @@index([email])
}

model Course {
  id          String     @id @default(cuid())
  code        String
  title       String
  description String?
  term        String?
  startDate   DateTime?
  endDate     DateTime?
  visibility  Visibility @default(PUBLISHED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  enrollments Enrollment[]
  assignments Assignment[]

  @@unique([code, term])
  @@index([visibility])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  role      Role
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId, role])
}

model Assignment {
  id             String         @id @default(cuid())
  courseId       String
  title          String
  type           AssignmentType
  description    String?
  points         Int            @default(100)
  dueAt          DateTime?
  availableAt    DateTime?
  visibility     Visibility     @default(PUBLISHED)
  allowResubmit  Boolean        @default(true)
  latePenaltyPct Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  problems    Problem[]
  submissions Submission[]
  rubrics     RubricCriterion[]
  grades      Grade[] // <-- back-rel to Grade

  @@index([courseId, type])
  @@index([dueAt])
}

model Problem {
  id           String @id @default(cuid())
  assignmentId String
  order        Int
  title        String
  prompt       String
  maxPoints    Int    @default(100)

  // CODE-specific
  starterCode   String?
  language      ProgrammingLanguage?
  timeLimitMs   Int?
  memoryLimitMb Int?

  assignment  Assignment          @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  testCases   TestCase[]
  submissions SubmissionProblem[]

  @@index([assignmentId, order])
}

model TestCase {
  id        String  @id @default(cuid())
  problemId String
  name      String
  input     String
  expected  String
  weight    Float   @default(1.0)
  hidden    Boolean @default(false)

  problem     Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testResults TestResult[] // <-- back-rel to TestResult

  @@index([problemId])
}

model Submission {
  id           String    @id @default(cuid())
  assignmentId String
  userId       String
  attempt      Int       @default(1)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  submittedAt  DateTime?
  isLate       Boolean   @default(false)

  payload Json

  autoScore   Float?
  manualScore Float?
  finalScore  Float?
  status      String @default("SUBMITTED")

  assignment    Assignment          @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  author        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemScores SubmissionProblem[]
  testResults   TestResult[]
  feedback      Feedback[]
  grade         Grade?

  @@unique([assignmentId, userId, attempt])
  @@index([assignmentId, userId])
}

model SubmissionProblem {
  id           String  @id @default(cuid())
  submissionId String
  problemId    String
  score        Float?
  autoScore    Float?
  manualScore  Float?
  comments     String?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  problem    Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([submissionId, problemId])
}

model TestResult {
  id           String  @id @default(cuid())
  submissionId String
  testCaseId   String
  passed       Boolean
  runtimeMs    Int?
  memoryMb     Int?
  stderr       String?
  stdout       String?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  testCase   TestCase   @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@unique([submissionId, testCaseId])
}

model Feedback {
  id           String   @id @default(cuid())
  submissionId String
  authorId     String? // must be optional for SetNull
  createdAt    DateTime @default(now())
  body         String
  inlineHints  Json?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  author     User?      @relation("FeedbackAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@index([submissionId])
}

model Grade {
  id           String   @id @default(cuid())
  submissionId String   @unique
  userId       String
  assignmentId String
  score        Float
  gradedAt     DateTime @default(now())
  graderId     String?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([userId, assignmentId])
}

model RubricCriterion {
  id           String  @id @default(cuid())
  assignmentId String
  order        Int
  label        String
  maxPoints    Int
  description  String?

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId, order])
}
