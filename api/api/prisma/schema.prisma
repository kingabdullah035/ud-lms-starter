generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assignment {
  id              String            @id
  courseId        String
  title           String
  type            AssignmentType
  description     String?
  points          Int               @default(100)
  dueAt           DateTime?
  availableAt     DateTime?
  visibility      Visibility        @default(PUBLISHED)
  allowResubmit   Boolean           @default(true)
  latePenaltyPct  Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  Course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Grade           Grade[]
  Problem         Problem[]
  RubricCriterion RubricCriterion[]
  Submission      Submission[]

  @@index([courseId, type])
  @@index([dueAt])
}

model Course {
  id          String       @id
  code        String
  title       String
  description String?
  term        String?
  startDate   DateTime?
  endDate     DateTime?
  visibility  Visibility   @default(PUBLISHED)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  Assignment  Assignment[]
  Enrollment  Enrollment[]

  @@unique([code, term])
  @@index([visibility])
}

model Enrollment {
  id        String   @id
  userId    String
  courseId  String
  role      Role
  createdAt DateTime @default(now())
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId, role])
}

model Feedback {
  id           String     @id
  submissionId String
  authorId     String?
  createdAt    DateTime   @default(now())
  body         String
  inlineHints  Json?
  User         User?      @relation(fields: [authorId], references: [id])
  Submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model Grade {
  id           String     @id
  submissionId String     @unique
  userId       String
  assignmentId String
  score        Float
  gradedAt     DateTime   @default(now())
  graderId     String?
  Assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  Submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, assignmentId])
}

model Problem {
  id                String               @id
  assignmentId      String
  order             Int
  title             String
  prompt            String
  maxPoints         Int                  @default(100)
  starterCode       String?
  language          ProgrammingLanguage?
  timeLimitMs       Int?
  memoryLimitMb     Int?
  Assignment        Assignment           @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  SubmissionProblem SubmissionProblem[]
  TestCase          TestCase[]

  @@index([assignmentId, order])
}

model RubricCriterion {
  id           String     @id
  assignmentId String
  order        Int
  label        String
  maxPoints    Int
  description  String?
  Assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId, order])
}

model Submission {
  id                String              @id
  assignmentId      String
  userId            String
  attempt           Int                 @default(1)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  submittedAt       DateTime?
  isLate            Boolean             @default(false)
  payload           Json
  autoScore         Float?
  manualScore       Float?
  finalScore        Float?
  status            String              @default("SUBMITTED")
  Feedback          Feedback[]
  Grade             Grade?
  Assignment        Assignment          @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  SubmissionProblem SubmissionProblem[]
  TestResult        TestResult[]

  @@unique([assignmentId, userId, attempt])
  @@index([assignmentId, userId])
}

model SubmissionProblem {
  id           String     @id
  submissionId String
  problemId    String
  score        Float?
  autoScore    Float?
  manualScore  Float?
  comments     String?
  Problem      Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  Submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, problemId])
}

model TestCase {
  id         String       @id
  problemId  String
  name       String
  input      String
  expected   String
  weight     Float        @default(1.0)
  hidden     Boolean      @default(false)
  Problem    Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  TestResult TestResult[]

  @@index([problemId])
}

model TestResult {
  id           String     @id
  submissionId String
  testCaseId   String
  passed       Boolean
  runtimeMs    Int?
  memoryMb     Int?
  stderr       String?
  stdout       String?
  Submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  TestCase     TestCase   @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@unique([submissionId, testCaseId])
}

model User {
  id         String       @id
  email      String       @unique
  name       String
  avatarUrl  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  isAdmin    Boolean      @default(false)
  Enrollment Enrollment[]
  Feedback   Feedback[]
  Grade      Grade[]
  Submission Submission[]

  @@index([email])
}

enum AssignmentType {
  FILE_UPLOAD
  URL
  CODE
  NOTEBOOK
  QUIZ
}

enum ProgrammingLanguage {
  PYTHON
  JAVASCRIPT
  TYPESCRIPT
  C
  CPP
  JAVA
}

enum Role {
  LEARNER
  INSTRUCTOR
  TA
  ADMIN
}

enum Visibility {
  DRAFT
  PUBLISHED
  ARCHIVED
}
